#+TITLE: Emacs configuration
#+AUTHOR: Nicholas Sim (nw0)
#+PROPERTY: header-args :tangle yes

* Configuration
** Preliminaries
*** About
This is my attempt at a literate emacs configuration.
It's largely because I've found writing comments and multiple files in elisp rather unwieldy.
**** Auto-tangle
Like [[https://github.com/frap/emacs-literate/blob/master/readme.org][Andrés Gasson]], I define this property to tangle most code blocks in this file.
#+BEGIN_SRC org :tangle no
#+PROPERTY: header-args :tangle yes
#+END_SRC
*** Inspiration
- [[https://github.com/frap/emacs-literate/blob/master/readme.org][Andrés Gasson]]

** Pre-initialisation
*** Optimisation for load
This saves me about 0.3s.
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold (* 256 1024 1024)
        gc-cons-percentage 10.0))
#+END_SRC

*** =custom= files
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

** Packages
*** Another optimisation
Avoid calling =(package-initialize)= for performance; this saves me about 0.3s.
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq load-prefer-newer t
        package-user-dir "~/.emacs.d/elpa"
        package--init-file-ensured t
        package-enable-at-startup nil)

  (unless (file-directory-p package-user-dir)
    (make-directory package-user-dir t))
  (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

*** Want org, melpa
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'package)

  (setq gnutls-min-prime-bits 4096)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)))
#+END_SRC

*** Can't live without =use-package=
#+BEGIN_SRC emacs-lisp
;; (setq use-package-always-defer t)
(setq use-package-verbose t)

(eval-when-compile
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (unless (package-installed-p 'bind-key)
    (package-refresh-contents)
    (package-install 'bind-key))
  (require 'use-package)
  (require 'bind-key))
#+END_SRC

*** Diminish, to clean up modeline
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :config
  (diminish 'eldoc-mode))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
;;;Org mode configuration
(use-package org
  :bind (("C-c a" . org-agenda))
  :hook
  ;; fix the indentation for variable-pitch
  (after-init . (lambda ()
                  (require 'org-indent)
                  (set-face-attribute 'org-indent nil
                                      :inherit '(org-hide fixed-pitch))))
  :config
  (setq org-src-preserve-indentation t
        org-todo-keywords '((sequence "TODO(t)" "BEGUN(s)" "WAIT(w)" "|" "DONE(d)" "DROP(c)"))
        org-startup-folded nil
        org-startup-indented 'f
        org-src-tab-acts-natively t
        org-log-done t
        org-agenda-span 17
        org-agenda-start-on-weekday nil
        org-agenda-start-day "-3d"
        org-agenda-files '("~/org"))
  (eval-after-load 'org-indent '(diminish 'org-indent-mode))
  )

(use-package org-bullets
  :ensure t
  :after (org)
  :hook
  (org-mode . org-bullets-mode)
  )

(defun org-agenda-force-refresh ()
  (interactive)
  (when (get-buffer "*Org Agenda*")
    (with-current-buffer "*Org Agenda*"
                         (org-agenda-maybe-redo)
                         (message "[org agenda] refreshed!"))))
(global-set-key (kbd "C-c r") 'org-agenda-force-refresh)
#+END_SRC

** Editor
*** Unicode
This should be the default, but just to be sure.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8
      default-buffer-file-coding-system 'utf-8)
#+END_SRC

*** Whitespace
Clean trailing ws from touched lines, and ensure EOF.
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)      ; less insanity

(use-package ws-butler
  :ensure t
  :diminish
  :hook ((prog-mode org-mode) . ws-butler-mode))

(setq-default show-trailing-whitespace t)
(dolist (hook '(special-mode-hook
                term-mode-hook
                comint-mode-hook
                compilation-mode-hook
                minibuffer-setup-hook))
  (add-hook hook
            (lambda () (setq show-trailing-whitespace nil))))
#+END_SRC

*** Backups, VC
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1            ; delete excess backup versions silently
      version-control t                 ; use version control
      vc-make-backup-files t            ; make backups file even when
                                        ; in version controlled dir
      backup-directory-alist `(("." . "~/.emacs.d/backups"))
      vc-follow-symlinks t              ; don't confirm opening symlinked file
      auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

(use-package undo-tree
  :ensure t
  :diminish)
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

*** Flyspell
This requires =aspell=, and dictionaries (=aspell-en=).
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :diminish
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :config
  (setq flyspell-issue-message-flag nil))
#+END_SRC

*** Project
Search with =ripgrep=
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "<f9>") 'projectile-command-map))

(use-package counsel-projectile
  :ensure t
  :after (projectile ivy counsel)
  :config
  (counsel-projectile-mode))

(use-package deadgrep
  :ensure t
  :bind ("<f5>" . deadgrep))
#+END_SRC

*** Completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :hook (after-init . global-company-mode)
  :custom
  (company-idle-delay .2)
  )
#+END_SRC

*** Line wrap
#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** Interface
*** Annoyances
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)              ; graphical only
(transient-mark-mode 1)
(delete-selection-mode t)           ; delete selection by DEL or overwriting
(column-number-mode 1)              ; in the modeline
(global-auto-revert-mode 1)

(setq inhibit-startup-screen t
      ring-bell-function 'ignore
      sentence-end-double-space nil
      fill-column 79)

(global-set-key (kbd "<home>") 'my/beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-line)
#+END_SRC

Slightly insidious change to =C-a=, due to [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][Mathieu Marques]].
#+BEGIN_SRC emacs-lisp
(global-set-key [remap move-beginning-of-line] #'my/beginning-of-line)

(defun my/beginning-of-line ()
  "Move point to first non-whitespace character, or beginning of line."
  (interactive "^")
  (let ((origin (point)))
    (beginning-of-line)
    (and (= origin (point))
         (back-to-indentation))))
#+END_SRC

*** How to use emacs??
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init (which-key-mode)
  :config
  (which-key-setup-side-window-bottom)
  (setq which-key-idle-delay 0.5))
#+END_SRC

*** Theming
This must be placed after =custom-safe-themes=
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox-dark-hard))

(set-face-attribute 'default nil :height 140)
(use-package smart-mode-line
  :ensure t
  :config
  (sml/setup))
#+END_SRC

*** Relative line numbering
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)                ; default, but be sure
(when (>= emacs-major-version 26)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode))
#+END_SRC

*** Highlighting
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)       ; syntax highlighting
(global-hl-line-mode t)         ; don't get lost
(show-paren-mode t)             ; highlight matching parentheses
(setq show-paren-delay 0.0
      blink-matching-paren nil)
#+END_SRC

This is less obtrusive than =auto-highlight-symbol=, which changes the bg under the cursor.
Note that =highlight-symbol= sets a face, which has lower priority than overlays (e.g. from =hl-line=)
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  :diminish
  :hook ((prog-mode . highlight-symbol-mode)
         (prog-mode . highlight-symbol-nav-mode))
  :config
  (setq highlight-symbol-idle-delay 0.8
        hightlight-symbol-on-navigation-p t))
#+END_SRC

*** Highlight TODOs
#+BEGIN_SRC emacs-lisp
(use-package fic-mode
  :ensure t
  :diminish
  :hook prog-mode
  :config
  (set-face-attribute 'fic-face nil
                      :foreground "orange"
                      :background "gray30"))
#+END_SRC

*** Show colours of colours
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :diminish
  :config
  (setq rainbow-x-colors nil)
  (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

*** Completion
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :diminish
  :config
  (counsel-mode))

(use-package swiper
  :ensure t
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))

(defun ivy--fuzzy-start (str)
  "Match things like in base-Emacs, bash, language-shells, etc. etc."
  (ivy--regex-fuzzy (concat "^" str)))

(use-package ivy
  :ensure t
  :diminish
  :bind (("C-x C-f" . counsel-find-file)
         ("C-c k" . counsel-rg)
         ("<f2> i" . counsel-info-lookup-symbol)
         ("<f2> u" . counsel-unicode-char)
         ("<f2> j" . counsel-set-variable)
         ("C-c J" . counsel-file-jump)
         ("M-x" . counsel-M-x))
  ;; load eagerly so ivy-rich loads correctly
  :init
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-re-builders-alist '((counsel-find-file . ivy--fuzzy-start)
                                (t . ivy--regex-plus))))

(use-package ivy-rich
  :ensure t
  :after (ivy counsel)
  :config
  (setq ivy-rich-path-style 'abbrev)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (ivy-rich-mode 1))
#+END_SRC
*** Mixed-pitch mode
Slightly nicer to use variable-width fonts when not programming
#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :ensure t
  :hook  (text-mode . mixed-pitch-mode))
#+END_SRC

*** Pangu
Show spaces between latin/cjk characters
#+BEGIN_SRC emacs-lisp
(use-package pangu-spacing
  :ensure t
  :diminish
  :config
  (global-pangu-spacing-mode 1))
#+END_SRC

*** Evil mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t ; This is optional since it's already set to t by default.
        evil-want-keybinding nil
        evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (define-key evil-normal-state-map "\C-a" 'my/beginning-of-line)
  (define-key evil-insert-state-map "\C-a" 'my/beginning-of-line)
  (define-key evil-visual-state-map "\C-a" 'my/beginning-of-line)
  (define-key evil-normal-state-map "\C-e" 'end-of-line)
  (define-key evil-insert-state-map "\C-e" 'end-of-line)
  (define-key evil-visual-state-map "\C-e" 'end-of-line))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

Scroll more like Vim.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-margin 2
      scroll-conservatively 10000)
#+END_SRC

*** Git
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :config
  (setq magit-completing-read-function 'ivy-completing-read))

(use-package diff-hl
  :ensure t
  :init
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :config
  (global-diff-hl-mode 1)
  (diff-hl-flydiff-mode 1))
#+END_SRC

** Modes
*** Elisp
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 2
              tab-width 8)
#+END_SRC

*** C/CPP
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  (define-key irony-mode-map
      [remap completion-at-point] 'counsel-irony)
  (define-key irony-mode-map
      [remap complete-symbol] 'counsel-irony))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC

*** Java
#+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook (lambda()
                            (setq c-basic-offset 4
                                  tab-width 4
                                  indent-tabs-mode t)))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t
  :mode "\\.rs\\'"
;;  :config (setq rust-format-on-save t)
  )

;; Run cargo commands in rust buffers, e.g. C-c C-c C-r for cargo-run
(use-package cargo
  :ensure t
  :diminish
  :hook (rust-mode . cargo-minor-mode)
  :init
  (add-hook 'toml-mode-hook 'cargo-minor-mode)
  )

(use-package racer
  :ensure t
  :diminish
  :init
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  :config
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq racer-rust-src-path "/usr/local/src/rust/src")
  )

;; Doesn't work, json-read-error
(use-package flycheck-rust
  :ensure t
  :init
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

*** TOML
#+BEGIN_SRC emacs-lisp
(use-package toml-mode
  :ensure t)
#+END_SRC

** Load other files
To begin, I've copied this directly from =init.el=.

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/edit.el")
(load-file "~/.emacs.d/modes.el")

;; less frequent garbage collection
(setq gc-cons-threshold (* 100 1024 1024)) ;; 100 mb
;; Allow font-lock-mode to do background parsing
(setq jit-lock-stealth-time 1
      ;; jit-lock-stealth-load 200
      jit-lock-chunk-size 1000
      jit-lock-defer-time 0.05)
;; this helps org-bullets (and other unicode things?) load faster
(setq inhibit-compacting-font-caches t)
#+END_SRC

** Post-initialisation
Set this to a slightly less obnoxious value at end of init.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024)
      gc-cons-percentage 0.2)
#+END_SRC
