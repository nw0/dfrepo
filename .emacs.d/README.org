#+TITLE: Emacs configuration
#+AUTHOR: Nicholas Sim (nw0)
#+PROPERTY: header-args :tangle yes

* Emacs configuration
** Preliminaries
*** About
This is my attempt at a literate emacs configuration.
It's largely because I've found writing comments and multiple files in elisp rather unwieldy.
**** Auto-tangle
Like [[https://github.com/frap/emacs-literate/blob/master/readme.org][Andrés Gasson]], I define this property to tangle most code blocks in this file.
#+BEGIN_SRC org :tangle no
#+PROPERTY: header-args :tangle yes
#+END_SRC
*** Inspiration
- [[https://github.com/frap/emacs-literate/blob/master/readme.org][Andrés Gasson]]

** Pre-initialisation
*** Optimisation for load
This saves me about 0.3s.
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold (* 256 1024 1024)
        gc-cons-percentage 10.0))
#+END_SRC

*** =custom= files
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

** Packages
*** Another optimisation
Avoid calling =(package-initialize)= for performance; this saves me about 0.3s.
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq load-prefer-newer t
        package-user-dir "~/.emacs.d/elpa"
        package--init-file-ensured t
        package-enable-at-startup nil)

  (unless (file-directory-p package-user-dir)
    (make-directory package-user-dir t))
  (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

*** Want org, melpa
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'package)

  (setq gnutls-min-prime-bits 4096)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)))
#+END_SRC

*** Can't live without =use-package=
#+BEGIN_SRC emacs-lisp
;; (setq use-package-always-defer t)
(setq use-package-verbose t)

(eval-when-compile
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (unless (package-installed-p 'bind-key)
    (package-refresh-contents)
    (package-install 'bind-key))
  (require 'use-package)
  (require 'bind-key))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

** Editor
*** Unicode
This should be the default, but just to be sure.
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8
      default-buffer-file-coding-system 'utf-8)
#+END_SRC

*** Whitespace
Clean trailing ws from touched lines, and ensure EOF.
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)      ; less insanity
(use-package ws-butler
  :ensure t
  :diminish
  :hook ((prog-mode org-mode) . ws-butler-mode))
#+END_SRC

** Interface
*** Annoyances
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode -1)              ; graphical only
#+END_SRC

*** Theme
This must be placed after =custom-safe-themes=
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox))
#+END_SRC

*** Relative line numbering
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)                ; default, but be sure
(when (>= emacs-major-version 26)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode))
#+END_SRC

*** Highlight symbols
This is less obtrusive than =auto-highlight-symbol=, which changes the bg under the cursor.
Note that =highlight-symbol= sets a face, which has lower priority than overlays (e.g. from =hl-line=)
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  :diminish
  :hook ((prog-mode . highlight-symbol-mode)
         (prog-mode . highlight-symbol-nav-mode))
  :config
  (setq highlight-symbol-idle-delay 0.8
        hightlight-symbol-on-navigation-p t))
#+END_SRC

*** Evil mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t ; This is optional since it's already set to t by default.
        evil-want-keybinding nil
        evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (define-key evil-normal-state-map "\C-a" 'beginning-of-line)
  (define-key evil-insert-state-map "\C-a" 'beginning-of-line)
  (define-key evil-visual-state-map "\C-a" 'beginning-of-line)
  (define-key evil-normal-state-map "\C-e" 'end-of-line)
  (define-key evil-insert-state-map "\C-e" 'end-of-line)
  (define-key evil-visual-state-map "\C-e" 'end-of-line))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+END_SRC

Scroll more like Vim.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-margin 2
      scroll-conservatively 10000)
#+END_SRC

** Load other files
To begin, I've copied this directly from =init.el=.

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/org.el")
(load-file "~/.emacs.d/interface.el")
(load-file "~/.emacs.d/edit.el")
(load-file "~/.emacs.d/modes.el")

;; less frequent garbage collection
(setq gc-cons-threshold (* 100 1024 1024)) ;; 100 mb
;; Allow font-lock-mode to do background parsing
(setq jit-lock-stealth-time 1
      ;; jit-lock-stealth-load 200
      jit-lock-chunk-size 1000
      jit-lock-defer-time 0.05)
;; this helps org-bullets (and other unicode things?) load faster
(setq inhibit-compacting-font-caches t)
#+END_SRC

** Post-initialisation
Set this to a slightly less obnoxious value at end of init.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024)
      gc-cons-percentage 0.2)
#+END_SRC
